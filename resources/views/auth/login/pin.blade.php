@push('head')
<link href="{{URL::asset('/paper/css/tailwind.min.css')}}" rel="stylesheet">
<link href="{{URL::asset('/paper/css/three-dots.css')}}" rel="stylesheet">
@endpush

<div id="pin-section" style="display: none">
    <form action="" method="post">
        <!-- This is the div where the pin fields are generated by Javascript -->
        <span class="col-md-8">Voer uw 6-cijferige pincode in</span>
        <div class="flex justify-center " id="PINInput">
        </div>

        <!-- Change this name attribute to mach your form submission parameters. Make sure you update the id in the javascript code if any changes are made to the id attribute -->
        <input hidden id="pin" name="pincode" value="">
        @csrf()
        <button class="btn btn-warning btn-round col-md-12 flex justify-center" id="pinSubmit" type='button'
            onclick="submitPIN()">
            Login
        </button>
    </form>
</div>

@push('scripts')
<script>
    /* This creates all the PIN input fields dynamically. Change the pin_length variable  to change the PIN Length */
    const $pin_length = 6;
    
    const element = document.getElementById('PINInput');
    for (let i = 0; i < $pin_length; i++) {
        let inputField = document.createElement('input'); // Creates a new input element
        inputField.className = "w-12 h-12 bg-gray-300 border-gray-100 outline-none focus:bg-mgray-200 m-2 text-center rounded focus:border-blue-400 focus:shadow-outline";
        // Do individual PIN input styling here;
        inputField.style.cssText = "color: transparent; text-shadow: 0 0 0 gray;"; // Input field text styling. This css hides the text caret
        inputField.id = 'pin-field' + i; // Don't remove
        inputField.maxLength = 1; // Sets individual field length to 1 char
        element.appendChild(inputField); // Adds the input field to the parent div (PINInput)
    }
    
    /*  This is for switching back and forth the input box for user experience */
    const inputs = document.querySelectorAll('#PINInput > *[id]');
    inputs[0].focus()
    for (let i = 0; i < inputs.length; i++) {
        inputs[i].addEventListener('keydown',(event) => {
            if (event.key === "Backspace") {
                inputs[i].value = '';
                if (i !== 0) {
                    inputs[i - 1].value =''
                    inputs[i - 1].focus();
                }
            }
            // if (event.key === "ArrowLeft" && i !== 0) return inputs[i - 1].focus();
            // if (event.key === "ArrowRight" && i !== inputs.length - 1) return inputs[i + 1].focus();
            if (event.key === "Enter") return submitPIN()
            if (!isFinite(event.key)) return event.preventDefault()
        });

        inputs[i].addEventListener('focus', ()=>{
            if (inputs[i-1]?.value === ''){
                inputs[i-1].focus();
            }
            if (inputs[i].value !== '') return inputs[i + 1].focus()

        });
        
        let timeout = null
        // inputs[i].addEventListener('keyup', ()=>{
        //     if (timeout !== null) {
        //         clearTimeout(timeout);
        //     }
        //     timeout = setTimeout(()=>{
        //     if (inputs[inputs.length - 1].value !== '' ){
        //         document.querySelector("#pinSubmit").click()
        //     }

        //     },2000)

        // });
        inputs[i].addEventListener('input', function () {
            if (inputs[i].value !== '') return inputs[i + 1]?.focus() 
        });

    }
    /*  This is to get the value on pressing the submit button
    *   In this example, I used a hidden input box to store the pin after compiling data from each input fields
    *   This hidden input will have a name attribute and all other single character fields won't have a name attribute
    *   This is to ensure that only this hidden input field will be submitted when you submit the form */

   const submitPIN = async ()=>{
       document.querySelector("#pinSubmit").innerHTML="<div class='dot-pulse'></div>"
       const inputs = document.querySelectorAll('#PINInput > *[id]');
       let compiledPIN = '';
       inputs.forEach((input)=> compiledPIN += input.value)
        let submitted= false
       await axios.get('/sanctum/csrf-cookie').then(
           ()=>{
        axios.post('api/login/pin',{
                pincode:compiledPIN
        })
        .then(({data})=>{
            if (data.login_success){
                Toast.fire({
                icon: 'success',
                title: 'Signed in successfully'
                }).then(()=>{
                clearInputs()
                window.location.replace('/home')
                }
                )
            }
           else
            {
                Toast.fire({
                icon: 'error',
                title: 'Sign in failed'
                })
                clearInputs()
                document.querySelector("#pinSubmit").innerHTML="Log In"
            }
        })}
        )
        return true;
}

    let clearInputs=()=>{
    inputs.forEach(input=>input.value="")
    inputs[0].focus()
    }

    const Toast = Swal.mixin({
    toast: true,
    position: 'top-end',
    showConfirmButton: false,
    timer: 1000,
    timerProgressBar: true,
    })
</script>
@endpush